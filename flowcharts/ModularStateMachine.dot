digraph ModularStateMachine {
    // Graph settings
    graph [rankdir=TB, splines=polyline, nodesep=0.8, ranksep=1.2, fontname="Arial", bgcolor="white"];
    node [shape=box, style="rounded,filled", fontname="Arial", fontsize=12, fontcolor="#333333", margin="0.4,0.2", penwidth=1.5];
    edge [fontname="Arial", fontsize=11, color="#555555", arrowsize=0.9, penwidth=1.5];
    
    // Create a legend
    subgraph cluster_legend {
        label="Legend";
        labeljust="l";
        style="rounded,filled";
        fillcolor="#F8F8F8";
        fontname="Arial Bold";
        fontsize=14;
        color="#888888";
        margin=10;
        
        legend_state [label="State Handler", fillcolor="#FFF2CC", margin="0.1,0.05"];
        legend_module [label="Module File", fillcolor="#DAE8FC", margin="0.1,0.05"];
        legend_class [label="Class Component", fillcolor="#D5E8D4", margin="0.1,0.05"];
        legend_transition [label="State Transition", fillcolor="white", style="rounded"];
        legend_implementation [label="Implementation", fillcolor="white", style="rounded"];
        
        legend_state -> legend_transition [style="dashed", color="#FF9900", label="transition"];
        legend_state -> legend_implementation [color="#3399FF", label="defined in"];
    }
    
    // Main components
    StateMachine [label="State Machine Controller\n(09_StateMachine.cpp)", fillcolor="#DAE8FC", shape=component, fontsize=14, fontname="Arial Bold", penwidth=2];
    
    // State handlers
    node [fillcolor="#FFF2CC", penwidth=1.5, fontname="Arial"];
    StartupState [label="Startup State\n• Initialize hardware\n• Set default positions"];
    HomingState [label="Homing State\n• Home cut motor\n• Home position motor\n• Set reference positions"];
    ReadyState [label="Ready State\n• Wait for user input\n• Monitor switches"];
    ReloadState [label="Reload State\n• Retract clamps\n• Allow wood placement"];
    CuttingState [label="Cutting State\n• Position wood\n• Perform cut\n• Check suction"];
    YesWoodState [label="Yes Wood State\n• Signal transfer arm\n• Move to ready position"];
    NoWoodState [label="No Wood State\n• Handle empty condition\n• Return to ready"];
    ErrorState [label="Error State\n• Display error code\n• Attempt recovery"];
    
    // Module components
    node [fillcolor="#DAE8FC", style="rounded,filled", shape=tab, fontname="Arial"];
    HomingModule [label="Homing Module\n(10_Homing.cpp)"];
    CuttingModule [label="Cutting Module\n(11_Cutting.cpp)"];
    YesWoodModule [label="Yes Wood Module\n(12_YesWood.cpp)"];
    NoWoodModule [label="No Wood Module\n(13_NoWood.cpp)"];
    ErrorModule [label="Error Module\n(15_Error.cpp)"];
    
    // Class components
    node [fillcolor="#D5E8D4", shape=box3d, fontname="Arial"];
    MotorClass [label="StepperMotor Class\n(05_MotorControlClass.cpp)"];
    
    // Core relationships
    edge [color="#3399FF", fontcolor="#3366FF"];
    StateMachine -> {StartupState HomingState ReadyState ReloadState CuttingState YesWoodState NoWoodState ErrorState} [label="calls"];
    
    // Module implementation relationships
    HomingState -> HomingModule [label="implemented in"];
    CuttingState -> CuttingModule [label="implemented in"];
    YesWoodState -> YesWoodModule [label="implemented in"];
    NoWoodState -> NoWoodModule [label="implemented in"];
    ErrorState -> ErrorModule [label="implemented in"];
    
    // Class usage
    edge [color="#009900", fontcolor="#006600"];
    {HomingModule CuttingModule} -> MotorClass [label="uses"];
    
    // State transitions
    edge [color="#FF9900", fontcolor="#FF6600", style=dashed, penwidth=2];
    StartupState -> HomingState [label="always"];
    HomingState -> ReadyState [label="when homed"];
    HomingState -> ErrorState [label="timeout"];
    ReadyState -> CuttingState [label="cycle switch"];
    ReadyState -> ReloadState [label="reload switch"];
    CuttingState -> YesWoodState [label="wood detected"];
    CuttingState -> NoWoodState [label="no wood"];
    CuttingState -> ErrorState [label="failure"];
    {YesWoodState NoWoodState} -> ReadyState [label="complete"];
    ErrorState -> HomingState [label="reset"];
    ReloadState -> ReadyState [label="reload complete"];
} 